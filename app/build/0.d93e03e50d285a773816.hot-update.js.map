{"version":3,"file":"0.d93e03e50d285a773816.hot-update.js","sources":["webpack:///src/components/Layout.js"],"sourcesContent":["/*\n\tDOCS:\n\t* this is 3 components: 1) the actual <Layout /> 2) <ConnectedLayout /> with Redux data 3) <LayoutExport /> which connects the Redux store and provider\n\t* this seems complicated, and is, but actually relieves complications later on in the app\n\t* this can possibly be divided into separate files, but that would not bring any additional benefits, because these 3 components are divided and exported as one because of Redux data stucture concerns, not modular architecture concerns\n\t* UNFORTUNATELY, unable to include Redux store provider in a more global file like App.js or Document.js (there is no App.js, and Document.js is weird SSR After.js/Next.js code)\n\t* UNFORTUNATELY ALSO, unable to include any Redux in the \"src/routes/*.js\" components/pages\n*/\nimport React from \"react\";\nimport Header from \"components/header/Header.js\";\n/* redux initialize */\nimport { compose, applyMiddleware, createStore } from \"redux\";\nimport { persistStore, autoRehydrate } from \"redux-persist\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"data/reducers\";\nimport { createLogger } from \"redux-logger\";\n/* redux connect */\nimport { connect } from \"react-redux\";\nimport * as actions from \"data/actions\";\n/* redux store */\nconst logger = createLogger({\n\tcollapsed: true\n});\nconst store = createStore(reducer, applyMiddleware(logger));\n// const store = createStore(reducer, compose(applyMiddleware(logger), autoRehydrate()));\n/*\n\tOriginal layout template\n*/\nclass Layout extends React.Component {\n\trender() {\n\t\tthis.props.dispatch(actions.my_area(this.props.area_key));\n\t\treturn (\n\t\t\t<div className=\"Layout\" style={Object.assign({ minHeight: \"100vh\" }, this.props.style || {})}>\n\t\t\t\t<Header />\n\t\t\t\t{this.props.children || null}\n\t\t\t</div>\n\t\t);\n\t}\n}\n/*\n\tConnect redux data\n*/\nconst mapStateToProps = (data, ownProps) => {\n\t/*\n\t\tdo not return {data.my} properties as props --- because {data.my.area_key} it is updated in this same component's \"render\" function, which is, yes, dangerous, so do not remove this comment\n\t*/\n\treturn {};\n};\nconst ConnectedLayout = connect(mapStateToProps)(Layout);\n/*\n\tLayout as the page component will receive it\n*/\nclass LayoutExport extends React.Component {\n\trender() {\n\t\t// if (this.props.purge) {\n\t\t// \tpersistStore(store)\n\t\t// \t\t.purge()\n\t\t// \t\t.then(function(what) {\n\t\t// \t\t\tconsole.info(\"PURGE\", what);\n\t\t// \t\t})\n\t\t// \t\t.catch(function(what) {\n\t\t// \t\t\tconsole.error(\"PURGE\", what);\n\t\t// \t\t});\n\t\t// } else {\n\t\t// \tpersistStore(store);\n\t\t// }\n\t\tconst { children, ...props } = this.props;\n\t\treturn (\n\t\t\t<Provider store={store}>\n\t\t\t\t<ConnectedLayout {...props}>{children}</ConnectedLayout>\n\t\t\t</Provider>\n\t\t);\n\t}\n}\n\nexport default LayoutExport;\n\n\n\n// WEBPACK FOOTER //\n// src/components/Layout.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;AAGA;;;;;;;;;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAKA;;;;AATA;AAWA;;;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;;;;AAGA;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AACA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;;;;AApBA;AACA;AAsBA;;;;A","sourceRoot":""}